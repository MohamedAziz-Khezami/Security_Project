"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { FileUpload } from "./file-upload"
import { ActionSelector } from "./action-selector"
import { PartialSelector } from "./partial-selector"
import { ResultSection } from "./result-section"
import { Button } from "@/components/ui/button"
import { Loader2, ShieldIcon as ShieldLock, HelpCircle, Eye, EyeOff, FileText, Upload } from "lucide-react"
import { AlgorithmGuide } from "./algorithm-guide"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { AlgorithmButtons } from "./algorithm-buttons"
import { LoadingOverlay } from "./loading-overlay"
import { IntroSteps } from "./intro-steps"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Textarea } from "@/components/ui/textarea"

type Action = "encrypt" | "decrypt" | "hash"
type ApplyTo = "full" | "partial"
type Algorithm = "AES" | "RSA" | "3DES" | "Caesar" | "XOR" | "SHA-256" | "BLAKE3"
type FileType = "text" | "image" | "pdf" | "docx" | "other" | null

export interface FileInfo {
  file: File | null
  name: string
  size: number
  type: FileType
  content?: string | ArrayBuffer | null
}

export function SecureTransfer() {
  const [fileInfo, setFileInfo] = useState<FileInfo>({
    file: null,
    name: "",
    size: 0,
    type: null,
    content: null,
  })
  const [action, setAction] = useState<Action>("encrypt")
  const [applyTo, setApplyTo] = useState<ApplyTo>("full")
  const [algorithm, setAlgorithm] = useState<Algorithm>("AES")
  const [key, setKey] = useState("")
  const [autoGenerateKey, setAutoGenerateKey] = useState(false)
  const [isProcessing, setIsProcessing] = useState(false)
  const [result, setResult] = useState<{
    success: boolean
    message: string
    hash?: string
    downloadUrl?: string
    fileName?: string
    fileContent?: string | ArrayBuffer
  } | null>(null)
  const [showGuide, setShowGuide] = useState(false)
  const [showIntroGuide, setShowIntroGuide] = useState(true)
  const [keyCopied, setKeyCopied] = useState(false)
  const [inputMode, setInputMode] = useState<"file" | "text">("file")
  const [inputText, setInputText] = useState("")
  const [showKey, setShowKey] = useState(false)
  const [rsaKeys, setRsaKeys] = useState<{ publicKey: string; privateKey: string } | null>(null)
  const [showPrivateKey, setShowPrivateKey] = useState(false)
  const [generatingKeys, setGeneratingKeys] = useState(false)
  const [keysCopied, setKeysCopied] = useState<"public" | "private" | null>(null)

  // Show intro guide on first load
  useEffect(() => {
    const hasSeenIntro = localStorage.getItem("hasSeenIntro")
    if (hasSeenIntro) {
      setShowIntroGuide(false)
    }
  }, [])

  const handleIntroGuideClosed = () => {
    setShowIntroGuide(false)
    localStorage.setItem("hasSeenIntro", "true")
  }

  const handleFileChange = (fileInfo: FileInfo) => {
    setFileInfo(fileInfo)
    setResult(null)
  }

  const handleActionChange = (newAction: Action) => {
    setAction(newAction)
    setResult(null)
  }

  const handleApplyToChange = (newApplyTo: ApplyTo) => {
    setApplyTo(newApplyTo)
    setResult(null)
  }

  const handleAlgorithmChange = (newAlgorithm: Algorithm) => {
    setAlgorithm(newAlgorithm)
    setResult(null)
  }

  const handleKeyChange = (newKey: string) => {
    setKey(newKey)
    setResult(null)
  }

  const handlePrivateKeyChange = (newPrivateKey: string) => {
    if (rsaKeys) {
      setRsaKeys({ ...rsaKeys, privateKey: newPrivateKey })
    } else {
      setRsaKeys({ publicKey: key, privateKey: newPrivateKey })
    }
    setResult(null)
  }

  const handleAutoGenerateKeyChange = (checked: boolean) => {
    setAutoGenerateKey(checked)
    if (checked) {
      if (algorithm === "RSA") {
        // RSA keys will be generated by the generateRSAKeys function
        // which is called from the checkbox onChange handler
      } else {
        // Generate a random key for other algorithms
        const randomKey = Array.from(window.crypto.getRandomValues(new Uint8Array(16)))
          .map((b) => b.toString(16).padStart(2, "0"))
          .join("")
        setKey(randomKey)
      }
    }
    setResult(null)
  }

  const handleCopyKey = (keyType: "public" | "private") => {
    if (keyType === "public") {
      navigator.clipboard.writeText(key)
      setKeyCopied(true)
      setTimeout(() => setKeyCopied(false), 2000)
    } else if (keyType === "private" && rsaKeys?.privateKey) {
      navigator.clipboard.writeText(rsaKeys.privateKey)
      setKeysCopied("private")
      setTimeout(() => setKeysCopied(null), 2000)
    }
  }

  const handleRemoveFile = () => {
    setFileInfo({
      file: null,
      name: "",
      size: 0,
      type: null,
      content: null,
    })
    setResult(null)
  }

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setInputText(e.target.value)
    setResult(null)
  }

  const handleProcess = async () => {
    if (inputMode === "file" && !fileInfo.file) return
    if (inputMode === "text" && !inputText.trim()) return

    setIsProcessing(true)
    setResult(null)

    // Simulate processing delay
    await new Promise((resolve) => setTimeout(resolve, 2000))

    // Create a blob for download demonstration
    const mockContent =
      inputMode === "text" ? inputText : "This is a mock processed file content for demonstration purposes."
    const blob = new Blob([mockContent], { type: "text/plain" })
    const url = URL.createObjectURL(blob)

    // Mock result
    if (action === "hash") {
      setResult({
        success: true,
        message: `${inputMode === "file" ? "File" : "Text"} hashed successfully!`,
        hash: "8f2e8293b2eabd58a5a314f34a0e9c0fb39c8be1b2cd5d6ff599a4a6ba2deed7",
      })
    } else {
      setResult({
        success: true,
        message: `${inputMode === "file" ? "File" : "Text"} ${action === "encrypt" ? "encrypted" : "decrypted"} successfully!`,
        downloadUrl: url,
        fileName:
          inputMode === "file"
            ? `${action === "encrypt" ? "encrypted" : "decrypted"}_${fileInfo.name}`
            : `${action === "encrypt" ? "encrypted" : "decrypted"}_text.txt`,
        fileContent: mockContent,
      })
    }

    setIsProcessing(false)
  }

  const isFormValid = () => {
    if (inputMode === "file" && !fileInfo.file) return false
    if (inputMode === "text" && !inputText.trim()) return false

    if (action === "encrypt" || action === "decrypt") {
      if (autoGenerateKey) return true

      if (algorithm === "RSA") {
        if (action === "encrypt" && !key) return false
        if (action === "decrypt" && !rsaKeys?.privateKey) return false
      } else {
        if (!key) return false
      }
    }

    return true
  }

  const isHashAction = action === "hash"
  const hashAlgorithms = ["SHA-256", "BLAKE3"]
  const isRSA = algorithm === "RSA"
  const isRSADecrypt = isRSA && action === "decrypt"
  const isRSAEncrypt = isRSA && action === "encrypt"

  const generateRSAKeys = () => {
    setGeneratingKeys(true)

    // Simulate key generation (in a real app, you would use a proper crypto library)
    setTimeout(() => {
      const publicKey = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu1SU1LfVLPHCozMxH2Mo
4lgOEePzNm0tRgeLezV6ffAt0gunVTLw7onLRnrq0/IzW7yWR7QkrmBL7jTKEn5u
+qKhbwKfBstIs+bMY2Zkp18gnTxKLxoS2tFczGkPLPgizskuemMghRniWaoLcyeh
kd3qqGElvW/VDL5AaWTg0nLVkjRo9z+40RQzuVaE8AkAFmxZzow3x+VJYKdjykkJ
0iT9wCS0DRTXu269V264Vf/3jvredZiKRkgwlL9xNAwxXFg0x/XFw005UWVRIkdg
cKWTjpBP2dPwVZ4WWC+9aGVd+Gyn1o0CLelf4rEjGoXbAAEgAqeGUxrcIlbjXfbc
mwIDAQAB
-----END PUBLIC KEY-----`

      const privateKey = `-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC7VJTUt9Us8cKj
MzEfYyjiWA4R4/M2bS1GB4t7NXp98C3SC6dVMvDuictGeurT8jNbvJZHtCSuYEvu
NMoSfm76oqFvAp8Gy0iz5sxjZmSnXyCdPEovGhLa0VzMaQ8s+CLOyS56YyCFGeJZ
qgtzJ6GR3eqoYSW9b9UMvkBpZODSctWSNGj3P7jRFDO5VoTwCQAWbFnOjDfH5Ulg
p2PKSQnSJP3AJLQNFNe7br1XbrhV//eO+t51mIpKSDCUv3E0DDFcWDTH9cXDTTlR
ZVEiR2BwpZOOkE/Z0/BVnhZYL71oZV34bKfWjQIt6V/isSMahdsAASACp4ZTGtwi
VuNd9tybAgMBAAECggEBAKTmjaS6tkK8BlPXClTQ2vpz/N6uxDeS35mXpqasqskV
laAidgg/sWqpjXDbXr93otIMLlWsM+X0CqMDgSXKejLS2jx4GDjI1ZTXg++0AMJ8
sJ74pWzVDOfmCEQ/7wXs3+cbnXhKriO8Z036q92Qc1+N87SI38nkGa0ABH9CN83H
mQqt4fB7UdHzuIRe/me2PGhIq5ZBzj6h3BpoPGzEP+x3l9YmK8t/1cN0pqI+dQwY
dgfGjackLu/2qH80MCF7IyQaseZUOJyKrCLtSD/Iixv/hzDEUPfOCjFDgTpzf3cw
ta8+oE4wHCo1iI1/4TlPkwmXx4qSXtmw4aQPz7IDQvECgYEA8KNThCO2gsC2I9PQ
DM/8Cw0O983WCDY+oi+7JPiNAJwv5DYBqEZB1QYdj06YD16XlC/HAZMsMku1na2T
N0driwenQQWzoev3g2S7gRDoS/FCJSI3jJ+kjgtaA7Qmzlgk1TxODN+G1H91HW7t
0l7VnL27IWyYo2qRRK3jzxqUiPUCgYEAx0oQs2reBQGMVZnApD1jeq7n4MvNLcPv
t8b/eU9iUv6Y4Mj0Suo/AU8lYZXm8ubbqAlwz2VSVunD2tOplHyMUrtCtObAfVDU
AhCndKaA9gApgfb3xw1IKbuQ1u4IF1FJl3VtumfQn//LiH1B3rXhcdyo3/vIttEk
48RakUKClU8CgYEAwF6hj4L3rDqvQYrB/p8tJdrrW+B7dhgZRNkJFX/0IPLTg9kO
qFqKYxslV3Py/poHxmQAaCnGOMaRxKStgJNR2x31n0JqJUKlw0Lyr8A/ZYTTRNpZ
jQIMmMEQizqEYKKslPcG3qFPpWfSYMRqRY0C5bGO/cAk0kLprKNq/kkVUvkCgYEA
rnPjxQsRRi4Z+2ypGzjP3J+df2JKAzbwJb47wOPYcu0IpVC8KnZxlw4+yzAW8D4w
n4FV9cYBOYCCZNGZnBCJYGVQjlNv3KwO0YiQX9kpUUN1zROwLIxWO2ik0/8pQ4XV
NryGQkKVA0aBYvPo6CyGIywCHfJSHXCpGWJ4JoZRXjcCgYBgGDYACtTP11TmW2r9
YK5VRLUDww0yDGkPvRVebL/azdIg8EbDXQ8SOdaZw8t0O9FvEUjqzMdkSt2K2uWf
YDfRcHVf1MoAC8CN2GvYlz6QGBnfzHPf/mCOTy7snmrb3/7sPkYbADzleMQQbVeD
3mKWDTE+ERUOJY23gFxuAZ5nLg==
-----END PRIVATE KEY-----`

      // Set both keys
      setRsaKeys({ publicKey, privateKey })

      // Set the appropriate key based on the action
      if (action === "encrypt") {
        setKey(publicKey)
      }

      setGeneratingKeys(false)
    }, 1000)
  }

  return (
    <div className="bg-white shadow-xl border border-blue-200 rounded-2xl overflow-hidden transition-all duration-300 hover:shadow-2xl">
      {/* Header */}
      <div className="bg-navy-600 bg-gradient-to-r from-blue-800 to-blue-900 text-white p-6 sm:p-8 text-center">
        <div className="flex justify-center mb-4">
          <div className="bg-white/10 p-3 rounded-full">
            <ShieldLock className="h-12 w-12 text-white" />
          </div>
        </div>
        <h1 className="text-3xl sm:text-4xl font-bold">SecureTransfer</h1>
        <p className="mt-2 text-blue-100">
          Your all-in-one tool for effortless file encryption, decryption, and hashing
        </p>
      </div>

      <div className="p-6 sm:p-8 space-y-8 max-w-7xl mx-auto">
        {/* Intro Steps - New section */}
        <IntroSteps />

        {/* Input Section - Updated with tabs for file/text */}
        <section className="bg-white p-6 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300">
          <h2 className="text-xl font-semibold mb-4">Input</h2>

          <Tabs defaultValue="file" onValueChange={(value) => setInputMode(value as "file" | "text")}>
            <TabsList className="grid grid-cols-2 mb-4">
              <TabsTrigger value="file" className="flex items-center gap-2">
                <Upload className="h-4 w-4" />
                <span>Upload File</span>
              </TabsTrigger>
              <TabsTrigger value="text" className="flex items-center gap-2">
                <FileText className="h-4 w-4" />
                <span>Type Text</span>
              </TabsTrigger>
            </TabsList>

            <TabsContent value="file">
              <FileUpload
                onFileChange={handleFileChange}
                onRemoveFile={() =>
                  setFileInfo({
                    file: null,
                    name: "",
                    size: 0,
                    type: null,
                    content: null,
                  })
                }
                fileInfo={fileInfo}
              />
            </TabsContent>

            <TabsContent value="text">
              <div className="space-y-2">
                <Label htmlFor="input-text">Enter text to process</Label>
                <Textarea
                  id="input-text"
                  placeholder="Type or paste your text here..."
                  className="min-h-[150px] font-mono text-sm"
                  value={inputText}
                  onChange={handleTextChange}
                />
              </div>
            </TabsContent>
          </Tabs>
        </section>

        {((inputMode === "file" && fileInfo.file) || (inputMode === "text" && inputText.trim())) && (
          <>
            {/* Action Selector */}
            <section className="bg-white p-6 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300">
              <h2 className="text-xl font-semibold mb-4">Choose Action</h2>
              <ActionSelector action={action} onChange={handleActionChange} />
            </section>

            {/* Partial Encryption/Decryption Selector */}
            {(action === "encrypt" || action === "decrypt") && (
              <section className="bg-white p-6 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300">
                <h2 className="text-xl font-semibold mb-4">Apply To</h2>
                <PartialSelector
                  applyTo={applyTo}
                  onChange={handleApplyToChange}
                  fileInfo={fileInfo}
                  inputMode={inputMode}
                  inputText={inputText}
                />
              </section>
            )}

            {/* Algorithm & Key Configuration */}
            <section className="bg-white p-6 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300">
              <h2 className="text-xl font-semibold mb-4">Algorithm & Key Configuration</h2>
              <AlgorithmButtons algorithm={algorithm} onAlgorithmChange={handleAlgorithmChange} action={action} />

              {!isHashAction && !hashAlgorithms.includes(algorithm) && (
                <div className="space-y-4 mt-4">
                  {/* Public/Encryption Key - Only show for encryption or non-RSA */}
                  {(!isRSA || isRSAEncrypt) && (
                    <div className="space-y-2">
                      <Label htmlFor="key">
                        {isRSA ? "Public Key" : action === "encrypt" ? "Encryption Key" : "Decryption Key"}
                      </Label>
                      <div className="flex gap-2">
                        <div className="relative flex-1">
                          <Input
                            id="key"
                            type={showKey ? "text" : "password"}
                            value={key}
                            onChange={(e) => handleKeyChange(e.target.value)}
                            disabled={autoGenerateKey}
                            placeholder={
                              isRSA
                                ? "Enter or generate public key"
                                : action === "encrypt"
                                  ? "Enter or generate encryption key"
                                  : "Enter decryption key"
                            }
                            className="pr-10"
                          />
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                            onClick={() => setShowKey(!showKey)}
                          >
                            {showKey ? (
                              <EyeOff className="h-4 w-4 text-gray-500" />
                            ) : (
                              <Eye className="h-4 w-4 text-gray-500" />
                            )}
                            <span className="sr-only">{showKey ? "Hide" : "Show"} key</span>
                          </Button>
                        </div>
                        <Button
                          onClick={() => handleCopyKey("public")}
                          variant="outline"
                          className={`min-w-[80px] transition-all duration-200 ${
                            keyCopied
                              ? "bg-green-100 text-green-700 border-green-300"
                              : "hover:bg-blue-50 hover:border-blue-300"
                          }`}
                        >
                          {keyCopied ? "Copied!" : "Copy"}
                        </Button>
                      </div>
                    </div>
                  )}

                  {/* Private Key (for RSA) */}
                  {isRSA && (
                    <div className="space-y-2">
                      <Label htmlFor="private-key" className="flex items-center">
                        Private Key
                        {isRSADecrypt && <span className="ml-2 text-xs text-amber-600">(Required for decryption)</span>}
                        {isRSAEncrypt && <span className="ml-2 text-xs text-amber-600">(Keep secure)</span>}
                      </Label>
                      <div className="flex gap-2">
                        <div className="relative flex-1">
                          <Input
                            id="private-key"
                            type={showPrivateKey ? "text" : "password"}
                            value={rsaKeys?.privateKey || ""}
                            onChange={(e) => handlePrivateKeyChange(e.target.value)}
                            disabled={autoGenerateKey}
                            placeholder="Enter or generate private key"
                            className="pr-10"
                          />
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                            onClick={() => setShowPrivateKey(!showPrivateKey)}
                          >
                            {showPrivateKey ? (
                              <EyeOff className="h-4 w-4 text-gray-500" />
                            ) : (
                              <Eye className="h-4 w-4 text-gray-500" />
                            )}
                            <span className="sr-only">{showPrivateKey ? "Hide" : "Show"} private key</span>
                          </Button>
                        </div>
                        <Button
                          onClick={() => handleCopyKey("private")}
                          variant="outline"
                          className={`min-w-[80px] transition-all duration-200 ${
                            keysCopied === "private"
                              ? "bg-green-100 text-green-700 border-green-300"
                              : "hover:bg-blue-50 hover:border-blue-300"
                          }`}
                        >
                          {keysCopied === "private" ? "Copied!" : "Copy"}
                        </Button>
                      </div>
                    </div>
                  )}

                  {/* Auto-generate key checkbox */}
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="auto-generate"
                      checked={autoGenerateKey}
                      onCheckedChange={(checked) => {
                        const isChecked = checked === true
                        handleAutoGenerateKeyChange(isChecked)

                        // For RSA, generate both keys
                        if (isChecked && isRSA) {
                          generateRSAKeys()
                        }
                      }}
                    />
                    <Label htmlFor="auto-generate" className="text-sm cursor-pointer">
                      Auto-generate {isRSA ? "keys" : "key"}
                    </Label>
                  </div>
                </div>
              )}

              <div className="mt-4">
                <Button
                  variant="outline"
                  onClick={() => setShowGuide(true)}
                  className="w-full transition-all duration-200 hover:bg-blue-50 hover:border-blue-300"
                >
                  <HelpCircle className="h-4 w-4 mr-2" />
                  Help Me Choose an Algorithm
                </Button>
              </div>
            </section>

            {/* Submit Button */}
            <section className="bg-white p-6 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300">
              <Button
                onClick={handleProcess}
                disabled={!isFormValid() || isProcessing}
                className="w-full py-6 text-lg transition-all duration-200 hover:bg-blue-600 hover:scale-[1.01] bg-gradient-to-r from-blue-600 to-blue-700"
              >
                {isProcessing ? (
                  <>
                    <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                    Processing...
                  </>
                ) : (
                  "Start Processing"
                )}
              </Button>
            </section>

            {/* Result Section */}
            {result && <ResultSection result={result} action={action} />}
          </>
        )}
      </div>

      {/* Algorithm Guide Modal */}
      <AlgorithmGuide open={showGuide} onOpenChange={setShowGuide} />

      {/* Loading Overlay */}
      {isProcessing && <LoadingOverlay />}
    </div>
  )
}
